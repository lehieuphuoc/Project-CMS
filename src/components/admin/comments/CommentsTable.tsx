"use client";

import React, { useState } from "react";
import {
    Table,
    Button,
    Modal,
    Form,
    Input,
    Select,
    Space,
    Popconfirm,
    message,
    notification,
} from "antd";
import {
    PlusOutlined,
    EditOutlined,
    DeleteOutlined,
    MessageOutlined,
} from "@ant-design/icons";

interface Comment {
    id: number;
    author: string;
    content: string;
    postTitle: string;
    status: string;
}

const { TextArea } = Input;
const { Option } = Select;

export default function CommentsTable() {
    const [comments, setComments] = useState<Comment[]>([
        {
            id: 1,
            author: "Nguy·ªÖn VƒÉn A",
            content: "B√†i vi·∫øt r·∫•t hay v√† h·ªØu √≠ch!",
            postTitle: "H·ªçc ReactJS c∆° b·∫£n",
            status: "approved",
        },
        {
            id: 2,
            author: "Tr·∫ßn Th·ªã B",
            content:
                "M√¨nh th·∫•y ph·∫ßn n√†y h∆°i kh√≥ hi·ªÉu, b·∫°n c√≥ th·ªÉ gi·∫£i th√≠ch th√™m kh√¥ng?",
            postTitle: "Gi·ªõi thi·ªáu Next.js 14",
            status: "pending",
        },
        {
            id: 3,
            author: "Tr·∫ßn Th·ªã C",
            content:
                "M√¨nh th·∫•y ph·∫ßn n√†y h∆°i kh√≥ hi·ªÉu, b·∫°n c√≥ th·ªÉ gi·∫£i th√≠ch th√™m kh√¥ng?",
            postTitle: "Gi·ªõi thi·ªáu Next.js 15",
            status: "hidden",
        },
    ]);

    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingComment, setEditingComment] = useState<Comment | null>(null);
    const [form] = Form.useForm();

    
    const openModal = (comment?: Comment) => {
        if (comment) {
            setEditingComment(comment);
            form.setFieldsValue(comment);
        } else {
            setEditingComment(null);
            form.resetFields();
        }
        setIsModalOpen(true);
    };

   
    const handleSave = () => {
        form
            .validateFields()
            .then((values) => {
                if (editingComment) {
                    setComments((prev) =>
                        prev.map((item) =>
                            item.id === editingComment.id ? { ...item, ...values } : item
                        )
                    );
                    notification.success({
                        message: "C·∫≠p nh·∫≠t th√†nh c√¥ng üéâ",
                        description: `B√¨nh lu·∫≠n c·ªßa "${values.author}" ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.`,
                    });
                } else {
                    const newComment = {
                        id: comments.length + 1,
                        ...values,
                    };
                    setComments([...comments, newComment]);
                    notification.success({
                        message: "Th√™m b√¨nh lu·∫≠n m·ªõi üìù",
                        description: `B√¨nh lu·∫≠n c·ªßa "${values.author}" ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng.`,
                    });
                }
                setIsModalOpen(false);
            })
            .catch(() =>
                notification.error({
                    message: "L·ªói nh·∫≠p li·ªáu",
                    description: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.",
                })
            );
    };

   
    const handleDelete = (id: number) => {
        const deletedComment = comments.find((c) => c.id === id);
        setComments((prev) => prev.filter((c) => c.id !== id));
        notification.info({
            message: "ƒê√£ x√≥a b√¨nh lu·∫≠n üóëÔ∏è",
            description: `B√¨nh lu·∫≠n c·ªßa "${deletedComment?.author}" ƒë√£ b·ªã x√≥a.`,
        });
    };


    const columns = [
        {
            title: "ID",
            dataIndex: "id",
            key: "id",
            width: 60,
        },
        {
            title: "Ng∆∞·ªùi b√¨nh lu·∫≠n",
            dataIndex: "author",
            key: "author",
            render: (text: string) => <strong>{text}</strong>,
        },
        {
            title: "N·ªôi dung",
            dataIndex: "content",
            key: "content",
            ellipsis: true,
        },
        {
            title: "B√†i vi·∫øt",
            dataIndex: "postTitle",
            key: "postTitle",
        },
        {
            title: "Tr·∫°ng th√°i",
            dataIndex: "status",
            key: "status",
            render: (status: string) => (
                <span
                    className={`px-2 py-1 rounded-md text-sm font-medium ${status === "approved"
                            ? "bg-green-100 text-green-700"
                            : status === "pending"
                                ? "bg-yellow-100 text-yellow-700"
                                : "bg-red-100 text-red-700"
                        }`}
                >
                    {status === "approved"
                        ? "ƒê√£ duy·ªát"
                        : status === "pending"
                            ? "Ch·ªù duy·ªát"
                            : "ƒê√£ ·∫©n"}
                </span>
            ),
        },
        {
            title: "H√†nh ƒë·ªông",
            key: "actions",
            width: 150,
            render: (_: any, record: Comment) => (
                <Space>
                    <Button
                        icon={<EditOutlined />}
                        onClick={() => openModal(record)}
                        type="default"
                    />
                    <Popconfirm
                        title="B·∫°n c√≥ mu·ªën x√≥a b√¨nh lu·∫≠n n√†y kh√¥ng?"
                        onConfirm={() => handleDelete(record.id)}
                        okText="X√≥a"
                        cancelText="H·ªßy"
                    >
                        <Button danger icon={<DeleteOutlined />} />
                    </Popconfirm>
                </Space>
            ),
        },
    ];

    return (
        <div className="p-4">
            
            <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-bold text-gray-800 flex items-center gap-2">
                    <MessageOutlined /> Qu·∫£n l√Ω b√¨nh lu·∫≠n
                </h2>
                <Button
                    type="primary"
                    icon={<PlusOutlined />}
                    onClick={() => openModal()}
                    className="bg-blue-600 hover:bg-blue-700"
                >
                    Th√™m b√¨nh lu·∫≠n
                </Button>
            </div>

         
            <Table
                dataSource={comments}
                columns={columns}
                rowKey="id"
                pagination={{ pageSize: 5 }}
                bordered
            />

           
            <Modal
                open={isModalOpen}
                onCancel={() => setIsModalOpen(false)}
                footer={null}
                centered
                width={600}
            >
                <div className="text-center mb-6">
                    <h2
                        className={`text-2xl font-bold ${editingComment ? "text-blue-600" : "text-green-600"
                            }`}
                    >
                        {editingComment ? "‚úèÔ∏è S·ª≠a b√¨nh lu·∫≠n" : "üìù Th√™m b√¨nh lu·∫≠n m·ªõi"}
                    </h2>
                    <div className="w-16 h-[3px] bg-gradient-to-r from-indigo-400 to-blue-500 mx-auto mt-2 rounded-full"></div>
                </div>

                <Form form={form} layout="vertical">
                    <Form.Item
                        label="Ng∆∞·ªùi b√¨nh lu·∫≠n"
                        name="author"
                        rules={[{ required: true, message: "Nh·∫≠p t√™n ng∆∞·ªùi b√¨nh lu·∫≠n" }]}
                    >
                        <Input placeholder="Nh·∫≠p t√™n ng∆∞·ªùi b√¨nh lu·∫≠n" />
                    </Form.Item>

                    <Form.Item
                        label="N·ªôi dung"
                        name="content"
                        rules={[{ required: true, message: "Nh·∫≠p n·ªôi dung b√¨nh lu·∫≠n" }]}
                    >
                        <TextArea rows={3} placeholder="Nh·∫≠p n·ªôi dung b√¨nh lu·∫≠n" />
                    </Form.Item>

                    <Form.Item
                        label="B√†i vi·∫øt li√™n quan"
                        name="postTitle"
                        rules={[{ required: true, message: "Nh·∫≠p t√™n b√†i vi·∫øt" }]}
                    >
                        <Input placeholder="T√™n b√†i vi·∫øt" />
                    </Form.Item>

                    <Form.Item label="Tr·∫°ng th√°i" name="status" initialValue="pending">
                        <Select>
                            <Option value="pending">Ch·ªù duy·ªát</Option>
                            <Option value="approved">ƒê√£ duy·ªát</Option>
                            <Option value="hidden">·∫®n</Option>
                        </Select>
                    </Form.Item>

                    <div className="flex justify-center gap-4 mt-6">
                        <Button onClick={() => setIsModalOpen(false)}>H·ªßy</Button>
                        <Button
                            type="primary"
                            onClick={handleSave}
                            className="bg-blue-600 hover:bg-blue-700 px-6"
                        >
                            {editingComment ? "C·∫≠p nh·∫≠t" : "Th√™m m·ªõi"}
                        </Button>
                    </div>
                </Form>
            </Modal>
        </div>
    );
}
