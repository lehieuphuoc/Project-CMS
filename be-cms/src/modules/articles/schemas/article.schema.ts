import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import mongoose, { HydratedDocument } from 'mongoose';
import { User } from '@/modules/users/schemas/user.schema';
import { Category } from '@/modules/categories/schemas/category.schema';
import { Tag } from '@/modules/tags/schemas/tag.schema';
import { Media } from '@/modules/medias/schemas/media.schema';

export type ArticleDocument = HydratedDocument<Article>;

/**
 * Tr·∫°ng th√°i b√†i vi·∫øt:
 * - draft: nh√°p
 * - pending_review: ch·ªù duy·ªát
 * - published: ƒë√£ xu·∫•t b·∫£n
 * - archived: ƒë√£ g·ª° / l∆∞u tr·ªØ
 */
export enum ArticleStatus {
  DRAFT = 'draft',
  PENDING_REVIEW = 'pending_review',
  PUBLISHED = 'published',
  ARCHIVED = 'archived',
}

@Schema({
  timestamps: true, // T·ª± ƒë·ªông th√™m createdAt, updatedAt
  toJSON: { virtuals: true },
  toObject: { virtuals: true },
})
export class Article {
  // ==============================
  // üß± Th√¥ng tin c∆° b·∫£n
  // ==============================

  @Prop({ required: [true, 'Ti√™u ƒë·ªÅ l√† b·∫Øt bu·ªôc'], trim: true })
  title: string;

  @Prop({
    required: [true, 'Slug l√† b·∫Øt bu·ªôc'],
    unique: true,
    lowercase: true,
    trim: true,
    index: true,
  })
  slug: string; // D√πng ƒë·ªÉ ƒë·ªãnh danh URL th√¢n thi·ªán

  @Prop({ trim: true })
  excerpt: string; // ƒêo·∫°n t√≥m t·∫Øt ng·∫Øn hi·ªÉn th·ªã ·ªü trang danh s√°ch

  @Prop({ required: [true, 'N·ªôi dung l√† b·∫Øt bu·ªôc'] })
  content: string; // N·ªôi dung ch√≠nh (HTML / Markdown)

  @Prop({
    type: String,
    enum: ArticleStatus,
    default: ArticleStatus.DRAFT,
    index: true,
  })
  status: ArticleStatus;

  @Prop({ default: 0 })
  views: number; // ƒê·∫øm l∆∞·ª£t xem

  @Prop({ type: Date, default: null })
  publishedAt: Date; // Th·ªùi ƒëi·ªÉm xu·∫•t b·∫£n (d√πng cho SEO + s·∫Øp x·∫øp)

  // ==============================
  // üîó Li√™n k·∫øt
  // ==============================

  @Prop({
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: [true, 'T√°c gi·∫£ l√† b·∫Øt bu·ªôc'],
  })
  author: User;

  @Prop({
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Category',
    required: [true, 'Danh m·ª•c l√† b·∫Øt bu·ªôc'],
  })
  category: Category;

  @Prop({
    type: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Tag' }],
    default: [],
  })
  tags: Tag[];

  @Prop({
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Media',
    default: null,
  })
  featuredImage: Media; // ·∫¢nh ƒë·∫°i di·ªán ch√≠nh (Open Graph + SEO)

  // ==============================
  // üîç SEO & T·ªëi ∆∞u hi·ªÉn th·ªã
  // ==============================

  @Prop({ trim: true })
  metaTitle: string; // Ti√™u ƒë·ªÅ SEO (fallback: title)

  @Prop({ trim: true })
  metaDescription: string; // M√¥ t·∫£ SEO (fallback: excerpt)

  @Prop({ trim: true })
  metaKeywords: string; // T·ª´ kh√≥a SEO (ngƒÉn c√°ch b·∫±ng d·∫•u ph·∫©y)

  @Prop({ trim: true })
  canonicalUrl: string; // URL g·ªëc ch·ªëng duplicate content

  @Prop({
    type: Object,
    default: {},
  })
  openGraph: {
    title?: string;
    description?: string;
    image?: string;
    type?: string; // article / website
  }; // D·ªØ li·ªáu hi·ªÉn th·ªã khi share m·∫°ng x√£ h·ªôi

  @Prop({
    type: Object,
    default: {},
  })
  schemaJson: Record<string, any>; // JSON-LD (schema.org) cho SEO n√¢ng cao

  // ==============================
  // üßÆ H·ªá th·ªëng ƒë√°nh gi√° SEO (t√πy ch·ªçn)
  // ==============================

  @Prop({ type: Number, default: 0, min: 0, max: 100 })
  seoScore: number; // ƒêi·ªÉm SEO t·ª± ƒë·ªông t√≠nh khi l∆∞u

  // ==============================
  // ‚öôÔ∏è T·ª± ƒë·ªông sinh tr∆∞·ªùng ·∫£o (virtuals)
  // ==============================

  // T·∫°o URL ƒë·ªông (d·ª±a v√†o slug)
  get url(): string {
    return `/bai-viet/${this.slug}`;
  }
}

export const ArticleSchema = SchemaFactory.createForClass(Article);

// ==============================
// üß† Index & Search
// ==============================

// Full-text search tr√™n ti√™u ƒë·ªÅ, slug, m√¥ t·∫£
ArticleSchema.index(
  { title: 'text', slug: 'text', excerpt: 'text', metaDescription: 'text' },
  {
    weights: { title: 10, slug: 5, metaDescription: 4 },
    name: 'search_index',
  },
);

// T·ªëi ∆∞u filter
ArticleSchema.index({ category: 1 });
ArticleSchema.index({ tags: 1 });
ArticleSchema.index({ status: 1 });
ArticleSchema.index({ publishedAt: -1 });
